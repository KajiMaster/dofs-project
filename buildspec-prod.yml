version: 0.2

env:
  variables:
    TF_ROOT: "terraform/environments/multi-env"

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - echo "Installing Terraform..."
      - curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
      - sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      - sudo apt-get update && sudo apt-get install terraform
      - terraform version

  pre_build:
    commands:
      - echo "=== PRODUCTION PRE-BUILD ==="
      - echo "Build started on $(date)"
      - echo "Target Environment -> $TF_WORKSPACE"
      - echo "Variables File -> $TF_VAR_FILE"
      - echo "Terraform Root -> $TF_ROOT"
      - cd $TF_ROOT
      - echo "Current directory $(pwd)"

  build:
    commands:
      - echo "=== PRODUCTION BUILD ==="
      - echo "Initializing Terraform..."
      - terraform init -input=false
      - echo "Creating/selecting workspace prod"
      - terraform workspace new prod 2>/dev/null || terraform workspace select prod
      - echo "Current workspace $(terraform workspace show)"
      - echo "Validating configuration..."
      - terraform validate
      - echo "Planning deployment..."
      - terraform plan -var-file="prod.tfvars" -input=false -out=tfplan
      - echo "Applying deployment..."
      - terraform apply -input=false -auto-approve tfplan
      - echo "Getting outputs..."
      - terraform output -json > terraform-outputs.json || echo "No outputs available"

  post_build:
    commands:
      - echo "=== POST-BUILD ==="
      - echo "Build completed on $(date)"
      - if [ $CODEBUILD_BUILD_SUCCEEDING -eq 1 ]; then echo "SUCCESS Production deployment completed"; else echo "FAILED Production deployment failed" && exit 1; fi

artifacts:
  files:
    - "**/*"
  base-directory: $TF_ROOT
  name: "terraform-prod-$(date +%Y%m%d-%H%M%S)"